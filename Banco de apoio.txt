




-- Tabela Usuários
CREATE TABLE "usuários" ( 
    id VARCHAR(60) PRIMARY KEY,
    name VARCHAR(60) NOT NULL,
    email VARCHAR(40) NOT NULL UNIQUE,
    cpf VARCHAR(40) NOT NULL UNIQUE,
    phone VARCHAR(20),
    password VARCHAR(40) NOT NULL,
    role VARCHAR(10) NOT NULL,
    createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Tabela Register
CREATE TABLE "register" (
    id VARCHAR(60) PRIMARY KEY,
    userId VARCHAR(60) REFERENCES "usuários"(id) ON DELETE CASCADE,
    title VARCHAR(40) NOT NULL,
    senderName VARCHAR(60),
    date TIMESTAMP NOT NULL,
    status VARCHAR(20),
    documents VARCHAR(80),
    createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Tabela Documentos
CREATE TABLE documentos (
    id SERIAL PRIMARY KEY,
    usuario_id INT REFERENCES "usuários"(id),
    titulo VARCHAR(200) NOT NULL,
    conteudo BYTEA NOT NULL, -- Armazenar o arquivo binário do documento
    tipo_documento VARCHAR(50) NOT NULL,
    status VARCHAR(50) CHECK (status IN ('pendente', 'aprovado', 'rejeitado')) DEFAULT 'pendente',
    data_upload TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
-- Ajustando o tipo da coluna usuario_id na tabela documentos
ALTER TABLE documentos
    
   
ALTER COLUMN usuario_id TYPE VARCHAR(60);

-- Recriando a constraint de chave estrangeira após o ajuste do tipo
ALTER TABLE documentos
    ADD CONSTRAINT documentos_usuario_id_fkey FOREIGN KEY (usuario_id) REFERENCES "usuários"(id) ON DELETE CASCADE;

-- Tabela Agendamentos
CREATE TABLE agendamentos (
    id SERIAL PRIMARY KEY,
    usuario_id INT REFERENCES "usuários"(id),
    data_agendamento TIMESTAMP NOT NULL,
    status VARCHAR(50) CHECK (status IN ('pendente', 'confirmado', 'cancelado')) DEFAULT 'pendente',
    lembrete_enviado BOOLEAN DEFAULT FALSE,
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela Assinaturas Digitais
CREATE TABLE assinaturas_digitais (
    id SERIAL PRIMARY KEY,
    usuario_id INT REFERENCES "usuários"(id),
    documento_id INT REFERENCES documentos(id),
    assinatura BYTEA NOT NULL, -- Armazenar assinatura digital
    data_assinatura TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela Integração Governamental
CREATE TABLE integracao_governamental (
    id SERIAL PRIMARY KEY,
    documento_id INT REFERENCES documentos(id),
    plataforma VARCHAR(100) NOT NULL, -- Nome da plataforma governamental
    status VARCHAR(50) CHECK (status IN ('validado', 'rejeitado')) DEFAULT 'validado',
    data_validacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela Relatórios
CREATE TABLE relatorios (
    id SERIAL PRIMARY KEY,
    usuario_id INT REFERENCES "usuários"(id),
    tipo_relatorio VARCHAR(100) NOT NULL,
    conteudo TEXT NOT NULL,
    data_geracao TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela Notificações/Alertas
CREATE TABLE notificacoes (
    id SERIAL PRIMARY KEY,
    usuario_id INT REFERENCES "usuários"(id),
    mensagem TEXT NOT NULL,
    lida BOOLEAN DEFAULT FALSE,
    data_envio TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela Backup/Recuperação
CREATE TABLE backup_recuperacao (
    id SERIAL PRIMARY KEY,
    data_backup TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(50) CHECK (status IN ('completo', 'falha')) DEFAULT 'completo',
    descricao TEXT
);

-- Tabela Logs para Auditoria
CREATE TABLE logs_auditoria (
    id SERIAL PRIMARY KEY,
    usuario_id INT REFERENCES "usuários"(id),
    acao VARCHAR(200) NOT NULL,
    data_acao TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela Controle de Acesso (RBAC)
CREATE TABLE roles (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(50) UNIQUE NOT NULL,
    descricao TEXT
);

-- Relacionamento usuários e permissões
CREATE TABLE usuario_roles (
    id SERIAL PRIMARY KEY,
    usuario_id INT REFERENCES "usuários"(id),
    role_id INT REFERENCES roles(id)
);

-- Inserindo dados de exemplo na tabela 'usuários'
INSERT INTO "usuários" (id, name, email, cpf, phone, password, role) VALUES
('1', 'Alice Silva', 'alice.silva@email.com', '123.456.789-10', '123456789', 'senha123', 'cliente'),
('2', 'João Souza', 'joao.souza@email.com', '987.654.321-00', '987654321', 'senha456', 'funcionario'),
('3', 'Maria Fernandes', 'maria.fernandes@email.com', '111.222.333-44', '111222333', 'senha789', 'admin');

-- Inserindo dados de exemplo na tabela 'register'
INSERT INTO "register" (id, userId, title, senderName, date, status, documents) VALUES
('1', '1', 'Contrato de Serviço', 'Alice Silva', '2024-09-20 10:00:00', 'aprovado', 'contrato_servico.pdf'),
('2', '2', 'Certificado de Autorização', 'João Souza', '2024-09-21 15:00:00', 'pendente', 'certificado_autorizacao.pdf'),
('3', '3', 'Declaração de Trabalho', 'Maria Fernandes', '2024-09-22 09:00:00', 'rejeitado', 'declaracao_trabalho.pdf');

-- Inserindo dados de exemplo na tabela 'documentos'
INSERT INTO documentos (usuario_id, titulo, conteudo, tipo_documento, status) VALUES
(1, 'Contrato de Serviço', DECODE('48656C6C6F20776F726C64', 'hex'), 'contrato', 'aprovado'),
(2, 'Certificado de Autorização', DECODE('68656C6C6F2066726F6D20616C696365', 'hex'), 'certificado', 'pendente'),
(3, 'Declaração de Trabalho', DECODE('486F772061726520796F7520746F646179', 'hex'), 'declaracao', 'rejeitado');

-- Inserindo dados de exemplo na tabela 'agendamentos'
INSERT INTO agendamentos (usuario_id, data_agendamento, status, lembrete_enviado) VALUES
(1, '2024-09-25 10:00:00', 'confirmado', TRUE),
(2, '2024-09-28 15:00:00', 'pendente', FALSE),
(3, '2024-09-29 09:00:00', 'cancelado', FALSE);

-- Inserindo dados de exemplo na tabela 'assinaturas_digitais'
INSERT INTO assinaturas_digitais (usuario_id, documento_id, assinatura) VALUES
(1, 1, DECODE('1234567890ABCDEF', 'hex')),
(2, 2, DECODE('ABCDEF1234567890', 'hex')),
(3, 3, DECODE('FEDCBA0987654321', 'hex'));

-- Inserindo dados de exemplo na tabela 'integração_governamental'
INSERT INTO integracao_governamental (documento_id, plataforma, status) VALUES
(1, 'gov.br', 'validado'),
(2, 'receita.gov', 'validado'),
(3, 'justica.gov', 'rejeitado');

-- Inserindo dados de exemplo na tabela 'relatórios'
INSERT INTO relatorios (usuario_id, tipo_relatorio, conteudo) VALUES
(1, 'Relatório de Documentos', 'Relatório de todos os documentos pendentes.'),
(2, 'Relatório de Agendamentos', 'Relatório detalhado dos agendamentos confirmados.'),
(3, 'Relatório de Usuários', 'Relatório completo dos usuários ativos no sistema.');

-- Inserindo dados de exemplo na tabela 'notificações'
INSERT INTO notificacoes (usuario_id, mensagem, lida) VALUES
(1, 'Seu documento foi aprovado.', TRUE),
(2, 'Seu agendamento está pendente de confirmação.', FALSE),
(3, 'Sua assinatura digital foi rejeitada.', FALSE);

-- Inserindo dados de exemplo na tabela 'backup_recuperacao'
INSERT INTO backup_recuperacao (status, descricao) VALUES
('completo', 'Backup diário realizado com sucesso.'),
('falha', 'Falha no backup devido a falta de espaço no servidor.'),
('completo', 'Backup semanal realizado com sucesso.');

-- Inserindo dados de exemplo na tabela 'logs_auditoria'
INSERT INTO logs_auditoria (usuario_id, acao) VALUES
(1, 'Usuário Alice fez upload de um documento.'),
(2, 'Usuário João alterou o status de um agendamento.'),
(3, 'Usuário Maria assinou digitalmente um documento.');

-- Inserindo dados de exemplo na tabela 'roles'
INSERT INTO roles (nome, descricao) VALUES
('admin', 'Acesso total ao sistema'),
('funcionario', 'Acesso limitado às funcionalidades de gestão'),
('cliente', 'Acesso aos serviços de usuário padrão');

-- Relacionando usuários e permissões na tabela 'usuario_roles'
INSERT INTO usuario_roles (usuario_id, role_id) VALUES
(1, 3), -- Alice é cliente
(2, 2), -- João é funcionário
(3, 1); -- Maria é admin

-- View para Relatórios de Documentos Aprovados
CREATE VIEW relatorio_documentos_aprovados AS
SELECT d.id, u.name AS usuario, d.titulo, d.tipo_documento, d.status, d.data_upload
FROM documentos d
JOIN "usuários" u ON d.usuario_id = u.id
WHERE d.status = 'aprovado';

-- View para Relatórios de Agendamentos Confirmados
CREATE VIEW relatorio_agendamentos_confirmados AS
SELECT a.id, u.name AS usuario, a.data_agendamento, a.status
FROM agendamentos a
JOIN "usuários" u ON a.usuario_id = u.id
WHERE a.status = 'confirmado';

-- View para Logs de Auditoria
CREATE VIEW relatorio_logs_auditoria AS
SELECT l.id, u.name AS usuario, l.acao, l.data_acao
FROM logs_auditoria l
JOIN "usuários" u ON l.usuario_id = u.id;